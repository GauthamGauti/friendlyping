syntax = "proto2";

package proto;

// Data structures

// The action represented by the message
enum Action {
    UNSPECIFIED = 0;
    REGISTER_NEW_CLIENT = 1;
    BROADCAST_NEW_CLIENT = 2;
    SEND_CLIENT_LIST = 3;
    PING_CLIENT = 4;
}

// A connected client
message Client {
  required string name = 1;
  required string registration_token = 2;
  required string profile_picture_url = 3;
}

// A friendly ping message can have different payloads
// depending on the action
message FriendlyPingMessage {
  required Action action = 1;
  oneof payload {
    RegisterNewClient rnc_payload = 2;
    BroadcastNewClient bnc_payload = 3;
    SendClientList scl_payload = 4;
    PingClient pc_payload = 5;
  }
}

// Payloads

// Registration request for a new client (device -> server)
message RegisterNewClient {
  required Client client = 1;
}

// Broadcast new client to registered clients (server -> devices)
message BroadcastNewClient {
  required Client client = 1;
}

// Send registered clients list to new client (server -> device)
message SendClientList {
  repeated Client clients = 1;
}

// Ping client (devicePinger -> deviceTo)
message PingClient {
  required Client to = 1;
  required Client pinger = 2;
  repeated MapFieldEntry data = 3;
  optional Notification notification = 4;
}

// A GCM notification
message Notification {
  optional string text = 1;
  optional string title = 2;
  optional string badge = 3;
}

// Hack for maps
message MapFieldEntry {
  required string key = 1;
  required string value = 2;
}
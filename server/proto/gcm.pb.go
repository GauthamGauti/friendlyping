// Code generated by protoc-gen-go.
// source: gcm.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	gcm.proto

It has these top-level messages:
	Client
	FriendlyPingMessage
	RegisterNewClient
	BroadcastNewClient
	SendClientList
	PingClient
	Notification
	MapFieldEntry
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

// The action represented by the message
type Action int32

const (
	Action_UNSPECIFIED          Action = 0
	Action_REGISTER_NEW_CLIENT  Action = 1
	Action_BROADCAST_NEW_CLIENT Action = 2
	Action_SEND_CLIENT_LIST     Action = 3
	Action_PING_CLIENT          Action = 4
)

var Action_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "REGISTER_NEW_CLIENT",
	2: "BROADCAST_NEW_CLIENT",
	3: "SEND_CLIENT_LIST",
	4: "PING_CLIENT",
}
var Action_value = map[string]int32{
	"UNSPECIFIED":          0,
	"REGISTER_NEW_CLIENT":  1,
	"BROADCAST_NEW_CLIENT": 2,
	"SEND_CLIENT_LIST":     3,
	"PING_CLIENT":          4,
}

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}
func (x Action) String() string {
	return proto1.EnumName(Action_name, int32(x))
}
func (x *Action) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Action_value, data, "Action")
	if err != nil {
		return err
	}
	*x = Action(value)
	return nil
}

// A connected client
type Client struct {
	Name              *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	RegistrationToken *string `protobuf:"bytes,2,req,name=registration_token" json:"registration_token,omitempty"`
	ProfilePictureUrl *string `protobuf:"bytes,3,req,name=profile_picture_url" json:"profile_picture_url,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto1.CompactTextString(m) }
func (*Client) ProtoMessage()    {}

func (m *Client) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Client) GetRegistrationToken() string {
	if m != nil && m.RegistrationToken != nil {
		return *m.RegistrationToken
	}
	return ""
}

func (m *Client) GetProfilePictureUrl() string {
	if m != nil && m.ProfilePictureUrl != nil {
		return *m.ProfilePictureUrl
	}
	return ""
}

// A friendly ping message can have different payloads
// depending on the action
type FriendlyPingMessage struct {
	Action           *Action             `protobuf:"varint,1,req,name=action,enum=proto.Action" json:"action,omitempty"`
	RncPayload       *RegisterNewClient  `protobuf:"bytes,2,opt,name=rnc_payload" json:"rnc_payload,omitempty"`
	BncPayload       *BroadcastNewClient `protobuf:"bytes,3,opt,name=bnc_payload" json:"bnc_payload,omitempty"`
	SclPayload       *SendClientList     `protobuf:"bytes,4,opt,name=scl_payload" json:"scl_payload,omitempty"`
	PcPayload        *PingClient         `protobuf:"bytes,5,opt,name=pc_payload" json:"pc_payload,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FriendlyPingMessage) Reset()         { *m = FriendlyPingMessage{} }
func (m *FriendlyPingMessage) String() string { return proto1.CompactTextString(m) }
func (*FriendlyPingMessage) ProtoMessage()    {}

func (m *FriendlyPingMessage) GetAction() Action {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Action_UNSPECIFIED
}

func (m *FriendlyPingMessage) GetRncPayload() *RegisterNewClient {
	if m != nil {
		return m.RncPayload
	}
	return nil
}

func (m *FriendlyPingMessage) GetBncPayload() *BroadcastNewClient {
	if m != nil {
		return m.BncPayload
	}
	return nil
}

func (m *FriendlyPingMessage) GetSclPayload() *SendClientList {
	if m != nil {
		return m.SclPayload
	}
	return nil
}

func (m *FriendlyPingMessage) GetPcPayload() *PingClient {
	if m != nil {
		return m.PcPayload
	}
	return nil
}

// Registration request for a new client (device -> server)
type RegisterNewClient struct {
	Client           *Client `protobuf:"bytes,1,req,name=client" json:"client,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegisterNewClient) Reset()         { *m = RegisterNewClient{} }
func (m *RegisterNewClient) String() string { return proto1.CompactTextString(m) }
func (*RegisterNewClient) ProtoMessage()    {}

func (m *RegisterNewClient) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

// Broadcast new client to registered clients (server -> devices)
type BroadcastNewClient struct {
	Client           *Client `protobuf:"bytes,1,req,name=client" json:"client,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BroadcastNewClient) Reset()         { *m = BroadcastNewClient{} }
func (m *BroadcastNewClient) String() string { return proto1.CompactTextString(m) }
func (*BroadcastNewClient) ProtoMessage()    {}

func (m *BroadcastNewClient) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

// Send registered clients list to new client (server -> device)
type SendClientList struct {
	Clients          []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SendClientList) Reset()         { *m = SendClientList{} }
func (m *SendClientList) String() string { return proto1.CompactTextString(m) }
func (*SendClientList) ProtoMessage()    {}

func (m *SendClientList) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

// Ping client (devicePinger -> deviceTo)
type PingClient struct {
	To               *Client          `protobuf:"bytes,1,req,name=to" json:"to,omitempty"`
	Pinger           *Client          `protobuf:"bytes,2,req,name=pinger" json:"pinger,omitempty"`
	Data             []*MapFieldEntry `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Notification     *Notification    `protobuf:"bytes,4,opt,name=notification" json:"notification,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *PingClient) Reset()         { *m = PingClient{} }
func (m *PingClient) String() string { return proto1.CompactTextString(m) }
func (*PingClient) ProtoMessage()    {}

func (m *PingClient) GetTo() *Client {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PingClient) GetPinger() *Client {
	if m != nil {
		return m.Pinger
	}
	return nil
}

func (m *PingClient) GetData() []*MapFieldEntry {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PingClient) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

// A GCM notification
type Notification struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Title            *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Badge            *string `protobuf:"bytes,3,opt,name=badge" json:"badge,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto1.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}

func (m *Notification) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Notification) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Notification) GetBadge() string {
	if m != nil && m.Badge != nil {
		return *m.Badge
	}
	return ""
}

// Hack for maps
type MapFieldEntry struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MapFieldEntry) Reset()         { *m = MapFieldEntry{} }
func (m *MapFieldEntry) String() string { return proto1.CompactTextString(m) }
func (*MapFieldEntry) ProtoMessage()    {}

func (m *MapFieldEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MapFieldEntry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto1.RegisterEnum("proto.Action", Action_name, Action_value)
}
